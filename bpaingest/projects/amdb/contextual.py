import re
from glob import glob

from ...libs import ingest_utils
from ...libs.excel_wrapper import (
    ExcelWrapper,
    FieldDefinition,
    make_field_definition as fld,
)
from ...util import one


class NotInVocabulary(Exception):
    pass


def ands_orSAMN(logger, s, silent=False):
    if not re.compile(r"SAMN\d{8}"):
        ingest_utils.extract_ands_id(logger, s, silent)


class AustralianMicrobiomeSampleContextual:
    metadata_urls = [
        "https://downloads-qcif.bioplatforms.com/bpa/amd/metadata/contextual/2021-03-22/"
    ]
    metadata_patterns = [re.compile(r"^.*\.xlsx$")]
    name = "amd-samplecontextual"
    sheet_name = "Sample_context"
    source_pattern = "/*.xlsx"
    field_specs = {
        sheet_name: [
            fld("sample_id", "sample_id", coerce=ands_orSAMN),
            fld("source_mat_id", "source_mat_id"),
            fld(
                "utc_date_sampled",
                "utc_date_sampled",
                coerce=ingest_utils.get_date_isoformat,
            ),
            fld("utc_time_sampled", "utc_time_sampled", coerce=ingest_utils.get_time),
            fld(
                "collection_date",
                "collection_date",
                coerce=ingest_utils.get_date_isoformat,
            ),
            fld("longitude", "longitude", coerce=ingest_utils.get_clean_number),
            fld("latitude", "latitude", coerce=ingest_utils.get_clean_number),
            fld("lat_lon", "lat_lon"),
            fld("geo_loc_name", "geo_loc_name"),
            fld("sample_site_location_description", "sample_site_location_description"),
            fld("sample_submitter", "sample_submitter"),
            fld("sample_attribution", "sample_attribution"),
            fld("funding_agency", "funding_agency"),
            fld("samp_collect_device", "samp_collect_device"),
            fld("samp_mat_process", "samp_mat_process"),
            fld("store_cond", "store_cond"),
            fld("biotic_relationship", "biotic_relationship"),
            fld("env_medium", "env_medium"),
            fld("env_material", "env_material"),
            fld("env_broad_scale", "env_broad_scale"),
            fld("env_local_scale", "env_local_scale"),
            fld("general_env_feature", "general_env_feature"),
            fld("vegetation_type", "vegetation_type"),
            fld("notes", "notes"),
            fld(
                "depth_lower",
                "depth_lower",
                units="m",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "depth_upper",
                "depth_upper",
                units="m",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("depth", "depth", coerce=ingest_utils.get_clean_number),
            fld("sample_type", "sample_type"),
            fld("sample_integrity_warnings", "sample_integrity_warnings"),
            fld("nucl_acid_ext", "nucl_acid_ext"),
            fld("dna_concentration_submitter", "dna_concentration_submitter"),
            fld("dna_concentration_submitter_meth", "dna_concentration_submitter_meth"),
            fld(
                "absorbance_260_280_ratio_submitter",
                "absorbance_260_280_ratio_submitter",
            ),
            fld(
                "absorbance_260_280_ratio_submitter_meth",
                "absorbance_260_280_ratio_submitter_meth",
            ),
            fld("am_environment", "am_environment"),
            fld("acid_volatile_sulphides", "acid_volatile_sulphides"),
            fld("acid_volatile_sulphides_meth", "acid_volatile_sulphides_meth"),
            fld("agrochem_addition", "agrochem_addition"),
            fld("alkalinity", "alkalinity"),
            fld("alkalinity_meth", "alkalinity_meth"),
            fld("allo", "allo", units="mg/m3", coerce=ingest_utils.get_clean_number),
            fld("allo_meth", "allo_meth"),
            fld("alpha_beta_car", "alpha_beta_car"),
            fld("alpha_beta_car_meth", "alpha_beta_car_meth"),
            fld(
                "ammonium",
                "ammonium",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("ammonium_meth", "ammonium_meth"),
            fld(
                "ammonium_nitrogen_wt",
                "ammonium_nitrogen_wt",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("ammonium_nitrogen_wt_meth", "ammonium_nitrogen_wt_meth"),
            fld(
                "ammonium_nitrogen_vol",
                "ammonium_nitrogen_vol",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("ammonium_nitrogen_vol_meth", "ammonium_nitrogen_vol_meth"),
            fld("anth", "anth", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("anth_meth", "anth_meth"),
            fld("antimony", "antimony"),
            fld("antimony_meth", "antimony_meth"),
            fld(
                "arsenic",
                "arsenic",
                units=u"\u00B5" + "g/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("arsenic_meth", "arsenic_meth"),
            fld("asta", "asta", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("asta_meth", "asta_meth"),
            fld(
                "average_host_abundance",
                "average_host_abundance",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("average_host_abundance_meth", "average_host_abundance_meth"),
            fld("barium", "barium"),
            fld("barium_meth", "barium_meth"),
            fld(
                "beta_beta_car",
                "beta_beta_car",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("beta_beta_car_meth", "beta_beta_car_meth"),
            fld(
                "beta_epi_car",
                "beta_epi_car",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("beta_epi_car_meth", "beta_epi_car_meth"),
            fld("biomass", "biomass"),
            fld("biomass_meth", "biomass_meth"),
            fld(
                "bleaching",
                "bleaching",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "boron_hot_cacl2",
                "boron_hot_cacl2",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("boron_hot_cacl2_meth", "boron_hot_cacl2_meth"),
            fld("bottle_number", "bottle_number"),
            fld("but_fuco", "but_fuco"),
            fld("but_fuco_meth", "but_fuco_meth"),
            fld(
                "cadmium",
                "cadmium",
                units=u"\u00B5" + "g/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("cadmium_meth", "cadmium_meth"),
            fld(
                "cantha", "cantha", units="mg/m3", coerce=ingest_utils.get_clean_number,
            ),
            fld("cantha_meth", "cantha_meth"),
            fld(
                "carbonate_bicarbonate",
                "carbonate_bicarbonate",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("carbonate_bicarbonate_meth", "carbonate_bicarbonate_meth"),
            fld("cation_exchange_capacity", "cation_exchange_capacity"),
            fld("cation_exchange_capacity_meth", "cation_exchange_capacity_meth"),
            fld("cerium", "cerium"),
            fld("cerium_meth", "cerium_meth"),
            fld("cesium", "cesium"),
            fld("cesium_meth", "cesium_meth"),
            fld(
                "chloride",
                "chloride",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("chloride_meth", "chloride_meth"),
            fld(
                "chlorophyll_a",
                "chlorophyll_a",
                units=u"\u00B5" + "g/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("chlorophyll_a_meth", "chlorophyll_a_meth"),
            fld(
                "chlorophyll_ctd",
                "chlorophyll_ctd",
                units="ug/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("chlorophyll_ctd_meth", "chlorophyll_ctd_meth"),
            fld(
                "chromium",
                "chromium",
                units=u"\u00B5" + "g/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("chromium_meth", "chromium_meth"),
            fld("citation", "citation"),
            fld("clay", "clay", units="%", coerce=ingest_utils.get_clean_number),
            fld("clay_meth", "clay_meth"),
            fld("coastal_id", "coastal_id"),
            fld(
                "cobalt",
                "cobalt",
                units=u"\u00B5" + "g/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("cobalt_meth", "cobalt_meth"),
            fld("color", "color"),
            fld(
                "conductivity",
                "conductivity",
                units="ds/m",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("conductivity_meth", "conductivity_meth"),
            fld(
                "conductivity_aqueous",
                "conductivity_aqueous",
                units="s/m",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("conductivity_aqueous_meth", "conductivity_aqueous_meth"),
            fld("course_sand", "course_sand"),
            fld("course_sand_meth", "course_sand_meth"),
            fld(
                "cphl_a", "cphl_a", units="mg/m3", coerce=ingest_utils.get_clean_number,
            ),
            fld("cphl_a_meth", "cphl_a_meth"),
            fld(
                "cphl_b", "cphl_b", units="mg/m3", coerce=ingest_utils.get_clean_number,
            ),
            fld("cphl_b_meth", "cphl_b_meth"),
            fld(
                "cphl_c1c2",
                "cphl_c1c2",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("cphl_c1c2_meth", "cphl_c1c2_meth"),
            fld(
                "cphl_c1",
                "cphl_c1",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("cphl_c1_meth", "cphl_c1_meth"),
            fld(
                "cphl_c2",
                "cphl_c2",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("cphl_c2_meth", "cphl_c2_meth"),
            fld(
                "cphl_c3",
                "cphl_c3",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("cphl_c3_meth", "cphl_c3_meth"),
            fld(
                "cphlide_a",
                "cphlide_a",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("cphlide_a_meth", "cphlide_a_meth"),
            fld("crop_rotation_1yr_since_present", "crop_rotation_1yr_since_present"),
            fld("crop_rotation_2yrs_since_present", "crop_rotation_2yrs_since_present"),
            fld("crop_rotation_3yrs_since_present", "crop_rotation_3yrs_since_present"),
            fld("crop_rotation_4yrs_since_present", "crop_rotation_4yrs_since_present"),
            fld("crop_rotation_5yrs_since_present", "crop_rotation_5yrs_since_present"),
            fld("ctdchlf", "ctdchlf"),
            fld("ctdchlf_meth", "ctdchlf_meth"),
            fld("cur_land_use", "cur_land_use"),
            fld(
                "date_since_change_in_land_use",
                "date_since_change_in_land_use",
                coerce=ingest_utils.date_or_str,
            ),
            fld("days_since_planting", "days_since_planting"),
            fld(
                "density",
                "density",
                units="kg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("density_meth", "density_meth"),
            fld("description", "description"),
            fld(
                "diadchr",
                "diadchr",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("diadchr_meth", "diadchr_meth"),
            fld(
                "diadino",
                "diadino",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("diadino_meth", "diadino_meth"),
            fld("diato", "diato", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("diato_meth", "diato_meth"),
            fld("dino", "dino", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("dino_meth", "dino_meth"),
            fld(
                "dtpa_copper",
                "dtpa_copper",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dtpa_copper_meth", "dtpa_copper_meth"),
            fld(
                "dtpa_iron",
                "dtpa_iron",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dtpa_iron_meth", "dtpa_iron_meth"),
            fld(
                "dtpa_manganese",
                "dtpa_manganese",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dtpa_manganese_meth", "dtpa_manganese_meth"),
            fld(
                "dtpa_zinc",
                "dtpa_zinc",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dtpa_zinc_meth", "dtpa_zinc_meth"),
            fld(
                "dv_cphl_a_and_cphl_a",
                "dv_cphl_a_and_cphl_a",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dv_cphl_a_and_cphl_a_meth", "dv_cphl_a_and_cphl_a_meth"),
            fld(
                "dv_cphl_a",
                "dv_cphl_a",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dv_cphl_a_meth", "dv_cphl_a_meth"),
            fld(
                "dv_cphl_b_and_cphl_b",
                "dv_cphl_b_and_cphl_b",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dv_cphl_b_and_cphl_b_meth", "dv_cphl_b_and_cphl_b_meth"),
            fld(
                "dv_cphl_b",
                "dv_cphl_b",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("dv_cphl_b_meth", "dv_cphl_b_meth"),
            fld("dysprosium", "dysprosium"),
            fld("dysprosium_meth", "dysprosium_meth"),
            fld("echin", "echin", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("echin_meth", "echin_meth"),
            fld("elev", "elev"),
            fld("erbium", "erbium"),
            fld("erbium_meth", "erbium_meth"),
            fld("europium", "europium"),
            fld("europium_meth", "europium_meth"),
            fld(
                "exc_aluminium",
                "exc_aluminium",
                units="meq/100g",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("exc_aluminium_meth", "exc_aluminium_meth"),
            fld(
                "exc_calcium",
                "exc_calcium",
                units="meq/100g",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("exc_calcium_meth", "exc_calcium_meth"),
            fld(
                "exc_magnesium",
                "exc_magnesium",
                units="meq/100g",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("exc_magnesium_meth", "exc_magnesium_meth"),
            fld(
                "exc_potassium",
                "exc_potassium",
                units="meq/100g",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("exc_potassium_meth", "exc_potassium_meth"),
            fld(
                "exc_sodium",
                "exc_sodium",
                units="meq/100g",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("exc_sodium_meth", "exc_sodium_meth"),
            fld("extreme_event", "extreme_event"),
            fld(
                "fine_sand",
                "fine_sand",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("fine_sand_meth", "fine_sand_meth"),
            fld(
                "fine_sediment",
                "fine_sediment",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("fine_sediment_meth", "fine_sediment_meth"),
            fld("fire", "fire"),
            fld("fire_intensity_if_known", "fire_intensity_if_known"),
            fld("flooding", "flooding"),
            fld("fluor", "fluor"),
            fld("fluor_meth", "fluor_meth"),
            fld("fouling", "fouling", units="%", coerce=ingest_utils.get_clean_number,),
            fld("fouling_organisms", "fouling_organisms"),
            fld("fresh_weight", "fresh_weight"),
            fld("fresh_weight_meth", "fresh_weight_meth"),
            fld("fuco", "fuco", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("fuco_meth", "fuco_meth"),
            fld("gadolinium", "gadolinium"),
            fld("gadolinium_meth", "gadolinium_meth"),
            fld("gallium", "gallium"),
            fld("gallium_meth", "gallium_meth"),
            fld("geospatial_coverage", "geospatial_coverage"),
            fld("germanium", "germanium"),
            fld("germanium_meth", "germanium_meth"),
            fld("gold", "gold"),
            fld("gold_meth", "gold_meth"),
            fld("gravel", "gravel", units="%", coerce=ingest_utils.get_clean_number,),
            fld("gravel_percent_meth", "gravel_percent_meth"),
            fld("grazing_number", "grazing_number"),
            fld("grazing", "grazing", units="%", coerce=ingest_utils.get_clean_number,),
            fld("gyro", "gyro", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("gyro_meth", "gyro_meth"),
            fld("hafnium", "hafnium"),
            fld("hafnium_meth", "hafnium_meth"),
            fld(
                "hex_fuco",
                "hex_fuco",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("hex_fuco_meth", "hex_fuco_meth"),
            fld("holmium", "holmium"),
            fld("holmium_meth", "holmium_meth"),
            fld("horizon", "horizon"),
            fld(
                "host_abundance_mean",
                "host_abundance_mean",
                units="individuals/m2",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "host_abundance",
                "host_abundance",
                units="individuals/m2",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "host_abundance_seaweed_mean",
                "host_abundance_seaweed_mean",
                units="ind/m2",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("host_associated_microbiome_zone", "host_associated_microbiome_zone"),
            fld("host_species_variety", "host_species_variety"),
            fld("host_state", "host_state"),
            fld("host_type", "host_type"),
            fld(
                "icp_te_boron",
                "icp_te_boron",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_boron_meth", "icp_te_boron_meth"),
            fld(
                "icp_te_calcium",
                "icp_te_calcium",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_calcium_meth", "icp_te_calcium_meth"),
            fld(
                "icp_te_copper",
                "icp_te_copper",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_copper_meth", "icp_te_copper_meth"),
            fld(
                "icp_te_iron",
                "icp_te_iron",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_iron_meth", "icp_te_iron_meth"),
            fld(
                "icp_te_manganese",
                "icp_te_manganese",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_manganese_meth", "icp_te_manganese_meth"),
            fld(
                "icp_te_phosphorus",
                "icp_te_phosphorus",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_phosphorus_meth", "icp_te_phosphorus_meth"),
            fld(
                "icp_te_sulfur",
                "icp_te_sulfur",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_sulfur_meth", "icp_te_sulfur_meth"),
            fld(
                "icp_te_zinc",
                "icp_te_zinc",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("icp_te_zinc_meth", "icp_te_zinc_meth"),
            fld("immediate_previous_land_use", "immediate_previous_land_use"),
            fld("imos_site_code", "imos_site_code"),
            fld("information", "information"),
            fld(
                "inorganic_fraction",
                "inorganic_fraction",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("inorganic_fraction_meth", "inorganic_fraction_meth"),
            fld("iridium", "iridium"),
            fld("iridium_meth", "iridium_meth"),
            fld(
                "keto_hex_fuco",
                "keto_hex_fuco",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("keto_hex_fuco_meth", "keto_hex_fuco_meth"),
            fld("lanthanum", "lanthanum"),
            fld("lanthanum_meth", "lanthanum_meth"),
            fld(
                "lead",
                "lead",
                units=u"\u00B5" + "g/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("lead_meth", "lead_meth"),
            fld("length", "length", units="cm", coerce=ingest_utils.get_clean_number,),
            fld("light_intensity", "light_intensity",),
            fld("light_intensity_meth", "light_intensity_meth"),
            fld(
                "light_intensity_meadow",
                "light_intensity_meadow",
                units=u"\u00B5" + "mol/m^2/s^-1",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("light_intensity_meadow_meth", "light_intensity_meadow_meth"),
            fld(
                "light_intensity_bottom",
                "light_intensity_bottom",
                units=u"\u00B5" + "mol/m^2/s^-1",
            ),
            fld("light_intensity_bottom_meth", "light_intensity_bottom_meth"),
            fld(
                "light_intensity_surface",
                "light_intensity_surface",
                units=u"\u00B5" + "mol/m^2/s^-1",
            ),
            fld("light_intensity_surface_meth", "light_intensity_surface_meth"),
            fld("local_class", "local_class"),
            fld("local_class_meth", "local_class_meth"),
            fld("lutetium", "lutetium"),
            fld("lutetium_meth", "lutetium_meth"),
            fld("lut", "lut", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("lut_meth", "lut_meth"),
            fld("lyco", "lyco", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("lyco_meth", "lyco_meth"),
            fld("magnesium", "magnesium"),
            fld("magnesium_meth", "magnesium_meth"),
            fld("metals", "metals"),
            fld("metals_meth", "metals_meth"),
            fld(
                "mg_dvp", "mg_dvp", units="mg/m3", coerce=ingest_utils.get_clean_number,
            ),
            fld("mg_dvp_meth", "mg_dvp_meth"),
            fld(
                "microbial_abundance",
                "microbial_abundance",
                units="cells/ml",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("microbial_abundance_meth", "microbial_abundance_meth"),
            fld("microbial_biomass", "microbial_biomass"),
            fld("microbial_biomass_meth", "microbial_biomass_meth"),
            fld("molybdenum", "molybdenum"),
            fld("molybdenum_meth", "molybdenum_meth"),
            fld("mud", "mud", units="%", coerce=ingest_utils.get_clean_number),
            fld("mud_meth", "mud_meth"),
            fld("myxo", "myxo"),
            fld("myxo_meth", "myxo_meth"),
            fld("neodymium", "neodymium"),
            fld("neodymium_meth", "neodymium_meth"),
            fld("neo", "neo", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("neo_meth", "neo_meth"),
            fld("nickel", "nickel"),
            fld("nickel_meth", "nickel_meth"),
            fld("niobium_columbium", "niobium_columbium"),
            fld("niobium_columbium_meth", "niobium_columbium_meth"),
            fld(
                "nitrate",
                "nitrate",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("nitrate_meth", "nitrate_meth"),
            fld("nitrate_nitrite", "nitrate_nitrite"),
            fld("nitrate_nitrite_meth", "nitrate_nitrite_meth"),
            fld(
                "nitrate_nitrogen",
                "nitrate_nitrogen",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("nitrate_nitrogen_meth", "nitrate_nitrogen_meth"),
            fld(
                "nitrite",
                "nitrite",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("nitrite_meth", "nitrite_meth"),
            fld("npic", "npic", units="mg/l", coerce=ingest_utils.get_clean_number,),
            fld("npic_meth", "npic_meth"),
            fld("npoc", "npoc", units="mg/l", coerce=ingest_utils.get_clean_number,),
            fld("npoc_meth", "npoc_meth"),
            fld("nrs_sample_code", "nrs_sample_code"),
            fld("nrs_trip_code", "nrs_trip_code"),
            fld("operation_cast_id", "operation_cast_id"),
            fld("org_matter", "org_matter"),
            fld("org_matter_meth", "org_matter_meth"),
            fld(
                "organic_carbon",
                "organic_carbon",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("organic_carbon_meth", "organic_carbon_meth"),
            fld(
                "organic_fraction",
                "organic_fraction",
                units="mg/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("organic_fraction_meth", "organic_fraction_meth"),
            fld("osmium", "osmium"),
            fld("osmium_meth", "osmium_meth"),
            fld(
                "oxygen", "oxygen", units="ml/l", coerce=ingest_utils.get_clean_number,
            ),
            fld("oxygen_meth", "oxygen_meth"),
            fld(
                "oxygen_ctd_vol",
                "oxygen_ctd_vol",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("oxygen_ctd_vol_meth", "oxygen_ctd_vol_meth"),
            fld(
                "oxygen_ctd_wt",
                "oxygen_ctd_wt",
                units=u"\u00B5" + "mol_per_kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("oxygen_ctd_wt_meth", "oxygen_ctd_wt_meth"),
            fld("palladium", "palladium"),
            fld("palladium_meth", "palladium_meth"),
            fld("pam_fluorometer", "pam_fluorometer"),
            fld("pam_fluorometer_meth", "pam_fluorometer_meth"),
            fld("par", "par"),
            fld("par_meth", "par_meth"),
            fld("part_org_carb", "part_org_carb"),
            fld("part_org_carb_meth", "part_org_carb_meth"),
            fld("perid", "perid", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("perid_meth", "perid_meth"),
            fld("ph", "ph"),
            fld("ph_meth", "ph_meth"),
            fld("ph_solid_h2o", "ph_solid_h2o"),
            fld("ph_solid_h2o_meth", "ph_solid_h2o_meth"),
            fld(
                "phide_a",
                "phide_a",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("phide_a_meth", "phide_a_meth"),
            fld(
                "phosphate",
                "phosphate",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("phosphate_meth", "phosphate_meth"),
            fld(
                "phosphorus_colwell",
                "phosphorus_colwell",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("phosphorus_colwell_meth", "phosphorus_colwell_meth"),
            fld(
                "phytin_a",
                "phytin_a",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("phytin_a_meth", "phytin_a_meth"),
            fld(
                "phytin_b",
                "phytin_b",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("phytin_b_meth", "phytin_b_meth"),
            fld("picoeukaryotes", "picoeukaryotes"),
            fld("picoeukaryotes_meth", "picoeukaryotes_meth"),
            fld("pigments", "pigments"),
            fld("pigments_meth", "pigments_meth"),
            fld("plant_id", "plant_id"),
            fld("plant_stage", "plant_stage"),
            fld("plant_stage_meth", "plant_stage_meth"),
            fld("platinum", "platinum"),
            fld("platinum_meth", "platinum_meth"),
            fld(
                "pn",
                "pn",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("pn_meth", "pn_meth"),
            fld("porewater_ph", "porewater_ph"),
            fld("porewater_ph_meth", "porewater_ph_meth"),
            fld("potassium", "potassium"),
            fld("potassium_meth", "potassium_meth"),
            fld(
                "potassium_colwell",
                "potassium_colwell",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("potassium_colwell_meth", "potassium_colwell_meth"),
            fld("pras", "pras", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("pras_meth", "pras_meth"),
            fld("praseodymium", "praseodymium"),
            fld("praseodymium_meth", "praseodymium_meth"),
            fld("pres_rel_dbar", "pres_rel_dbar"),
            fld("pres_rel_meth", "pres_rel_meth"),
            fld("profile_position", "profile_position"),
            fld("prochlorococcus", "prochlorococcus"),
            fld("prochlorococcus_meth", "prochlorococcus_meth"),
            fld(
                "pyrophide_a",
                "pyrophide_a",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("pyrophide_a_meth", "pyrophide_a_meth"),
            fld(
                "pyrophytin_a",
                "pyrophytin_a",
                units="mg/m3",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("pyrophytin_a_meth", "pyrophytin_a_meth"),
            fld("rhodium", "rhodium"),
            fld("rhodium_meth", "rhodium_meth"),
            fld("root_length", "root_length"),
            fld("root_length_meth", "root_length_meth"),
            fld("rubidium", "rubidium"),
            fld("rubidium_meth", "rubidium_meth"),
            fld("ruthenium", "ruthenium"),
            fld("ruthenium_meth", "ruthenium_meth"),
            fld("salinity", "salinity"),
            fld("salinity_meth", "salinity_meth"),
            fld("salinity_lab", "salinity_lab"),
            fld("salinity_lab_meth", "salinity_lab_meth"),
            fld("samarium", "samarium"),
            fld("samarium_meth", "samarium_meth"),
            fld("samp_size", "samp_size"),
            fld("samp_vol_we_dna_ext", "samp_vol_we_dna_ext"),
            fld("sample_volume_notes", "sample_volume_notes"),
            fld("sand", "sand", units="%", coerce=ingest_utils.get_clean_number),
            fld("sand_meth", "sand_meth"),
            fld("scandium", "scandium"),
            fld("scandium_meth", "scandium_meth"),
            fld(
                "secchi_depth",
                "secchi_depth",
                units="m",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("secchi_depth_meth", "secchi_depth_meth"),
            fld("sediment_grain_size", "sediment_grain_size"),
            fld("sediment_grain_size_meth", "sediment_grain_size_meth"),
            fld("sediment_grain_size_fract", "sediment_grain_size_fract"),
            fld("sediment_grain_size_fract_meth", "sediment_grain_size_fract_meth"),
            fld(
                "sedimentation_rate",
                "sedimentation_rate",
                units="g/(cm2 x yr)",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sedimentation_rate_meth", "sedimentation_rate_meth"),
            fld(
                "sediment_porewater_h4sio4",
                "sediment_porewater_h4sio4",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sediment_porewater_h4sio4_meth", "sediment_porewater_h4sio4_meth"),
            fld(
                "sediment_porewater_nh4",
                "sediment_porewater_nh4",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sediment_porewater_nh4_meth", "sediment_porewater_nh4_meth"),
            fld(
                "sediment_porewater_no2",
                "sediment_porewater_no2",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sediment_porewater_no2_meth", "sediment_porewater_no2_meth"),
            fld(
                "sediment_porewater_no3",
                "sediment_porewater_no3",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sediment_porewater_no3_meth", "sediment_porewater_no3_meth"),
            fld(
                "sediment_porewater_po43",
                "sediment_porewater_po43",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sediment_porewater_po43_meth", "sediment_porewater_po43_meth"),
            fld("selenium", "selenium"),
            fld("selenium_meth", "selenium_meth"),
            fld("shoot_length", "shoot_length"),
            fld("shoot_length_meth", "shoot_length_meth"),
            fld(
                "silicate",
                "silicate",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("silicate_meth", "silicate_meth"),
            fld("silt", "silt", units="%", coerce=ingest_utils.get_clean_number),
            fld("silt_meth", "silt_meth"),
            fld("silver", "silver"),
            fld("silver_meth", "silver_meth"),
            fld(
                "sio2",
                "sio2",
                units=u"\u00B5" + "mol/l",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sio2_meth", "sio2_meth"),
            fld(
                "slope_aspect",
                "slope_aspect",
                units="direction or degrees",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("slope_aspect_meth", "slope_aspect_meth"),
            fld(
                "slope_gradient",
                "slope_gradient",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("slope_gradient_meth", "slope_gradient_meth"),
            fld("sodium", "sodium"),
            fld("sodium_meth", "sodium_meth"),
            fld("specific_host", "specific_host"),
            fld("stress", "stress"),
            fld("strontium", "strontium"),
            fld("strontium_meth", "strontium_meth"),
            fld(
                "sulphur",
                "sulphur",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("sulphur_meth", "sulphur_meth"),
            fld("synecochoccus", "synecochoccus"),
            fld("synecochoccus_meth", "synecochoccus_meth"),
            fld("tantalum", "tantalum"),
            fld("tantalum_meth", "tantalum_meth"),
            fld(
                "temp",
                "temp",
                units="its-90 deg c",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("temp_meth", "temp_meth"),
            fld("terbium", "terbium"),
            fld("terbium_meth", "terbium_meth"),
            fld("texture", "texture"),
            fld("texture_meth", "texture_meth"),
            fld("thorium", "thorium"),
            fld("thorium_meth", "thorium_meth"),
            fld("thulium", "thulium"),
            fld("thulium_meth", "thulium_meth"),
            fld("tillage", "tillage"),
            fld("tin", "tin"),
            fld("tin_meth", "tin_meth"),
            fld(
                "tot_carb", "tot_carb", units="%", coerce=ingest_utils.get_clean_number,
            ),
            fld("tot_carb_meth", "tot_carb_meth"),
            fld("tot_depth_water_col", "tot_depth_water_col"),
            fld("tot_depth_water_meth", "tot_depth_water_meth"),
            fld("tot_nitro", "tot_nitro"),
            fld("tot_n_meth", "tot_n_meth"),
            fld("tot_org_carb", "tot_org_carb"),
            fld("tot_org_c_meth", "tot_org_c_meth"),
            fld("tot_phosp", "tot_phosp"),
            fld("tot_phosp_meth", "tot_phosp_meth"),
            fld(
                "total_co2",
                "total_co2",
                units=u"\u00B5" + "mol/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("total_co2_meth", "total_co2_meth"),
            fld(
                "total_inorganic_carbon",
                "total_inorganic_carbon",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("total_inorganic_carbon_meth", "total_inorganic_carbon_meth"),
            fld("total_nitrogen", "total_nitrogen"),
            fld("total_nitrogen_method", "total_nitrogen_method"),
            fld(
                "total_phosphorous",
                "total_phosphorous",
                units="mg/kg",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("total_phosphorous_meth", "total_phosphorous_meth"),
            fld("touching_organisms", "touching_organisms"),
            fld(
                "transmittance",
                "transmittance",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("transmittance_meth", "transmittance_meth"),
            fld("tss", "tss", units="mg/l", coerce=ingest_utils.get_clean_number,),
            fld("tss_meth", "tss_meth"),
            fld("tungsten", "tungsten"),
            fld("tungsten_meth", "tungsten_meth"),
            fld(
                "turbidity",
                "turbidity",
                units="ntu",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("turbidity_meth", "turbidity_meth"),
            fld("uranium", "uranium"),
            fld("uranium_meth", "uranium_meth"),
            fld("url", "url"),
            fld("vanadium", "vanadium"),
            fld("vanadium_meth", "vanadium_meth"),
            fld(
                "vegetation_dom_grasses",
                "vegetation_dom_grasses",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "vegetation_dom_shrubs",
                "vegetation_dom_shrubs",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "vegetation_dom_trees",
                "vegetation_dom_trees",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "vegetation_total_basal_area",
                "vegetation_total_basal_area",
                units="m2_in_0p25ha",
                coerce=ingest_utils.get_clean_number,
            ),
            fld(
                "vegetation_total_cover",
                "vegetation_total_cover",
                units="%",
                coerce=ingest_utils.get_clean_number,
            ),
            fld("vegetation_type_descriptive", "vegetation_type_descriptive"),
            fld("viola", "viola", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("viola_meth", "viola_meth"),
            fld("voyage_code", "voyage_code"),
            fld("voyage_survey_link", "voyage_survey_link"),
            fld("water_content", "water_content"),
            fld("water_content_soil_meth", "water_content_soil_meth"),
            fld("water_holding_capacity", "water_holding_capacity"),
            fld("water_holding_capacity_meth", "water_holding_capacity_meth"),
            fld("ytterbium", "ytterbium"),
            fld("ytterbium_meth", "ytterbium_meth"),
            fld("yttrium", "yttrium"),
            fld("yttrium_meth", "yttrium_meth"),
            fld("zea", "zea", units="mg/m3", coerce=ingest_utils.get_clean_number,),
            fld("zea_meth", "zea_meth"),
            fld("zirconium", "zirconium"),
            fld("zirconium_meth", "zirconium_meth"),
            fld(
                "sample_metadata_ingest_date",
                "sample_metadata_ingest_date",
                coerce=ingest_utils.get_date_isoformat,
            ),
            fld("sample_metadata_ingest_file", "sample_metadata_ingest_file"),
            fld("sample_metadata_update_history", "sample_metadata_update_history"),
        ]
    }

    def __init__(self, logger, path):
        self._logger = logger
        self.path_dir = path
        source_path = one(glob(path + self.source_pattern))
        self.initialise_source_path(source_path)

    def initialise_source_path(self, source_path):
        self.sample_metadata = self._package_metadata(self._read_metadata(source_path))

    @classmethod
    def units_for_fields(cls):
        r = {}
        for sheet_name, fields in cls.field_specs.items():
            for field in fields:
                if not isinstance(field, FieldDefinition):
                    continue
                if field.attribute in r and r[field.attribute] != field.units:
                    raise Exception("units inconsistent for field: {}", field.attribute)
                r[field.attribute] = field.units
        return r

    def sample_ids(self):
        return list(self.sample_metadata.keys())

    def get(self, sample_id):
        if sample_id in self.sample_metadata:
            return self.sample_metadata[sample_id]
        self._logger.warning(
            "no %s metadata available for: %s" % (type(self).__name__, repr(sample_id))
        )
        return {}

    def _package_metadata(self, rows):
        sample_metadata = {}
        for row in rows:
            if row.sample_id is None:
                continue
            if row.sample_id in sample_metadata:
                raise Exception(
                    "Metadata invalid, duplicate sample ID {} in row {}".format(
                        row.sample_id, row
                    )
                )
            assert row.sample_id not in sample_metadata
            sample_metadata[row.sample_id] = row_meta = {}
            for field in row._fields:
                val = getattr(row, field)
                if field != "sample_id":
                    row_meta[field] = val
        return sample_metadata

    @staticmethod
    def environment_for_sheet(sheet_name):
        return "Soil" if sheet_name == "Soil" else "Marine"

    def _read_metadata(self, metadata_path):
        rows = []
        for sheet_name, field_spec in sorted(self.field_specs.items()):
            wrapper = ExcelWrapper(
                self._logger,
                field_spec,
                metadata_path,
                sheet_name=sheet_name,
                header_length=1,
                column_name_row_index=0,
                suggest_template=True,
                additional_context={},
            )
            for error in wrapper.get_errors():
                self._logger.error(error)
            rows += wrapper.get_all()
        return rows

    def filename_metadata(self, *args, **kwargs):
        return {}
